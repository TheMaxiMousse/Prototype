---
import '../styles/global.css'
import Icon from '../components/Icon.astro'

const { title } = Astro.props
---

<header class="show">
    <a href="index.html" title="Home">
        <Icon icon="home" />
        <h1>{title}</h1>
    </a>
    <nav>
        <ul>
            <li id="admin-link" style="display: none;">
                <a href="admin.html" title="Admin Panel">
                    <Icon icon="admin" />
                </a>
            </li>
            <!-- <li id="header-cart">
                <a href="cart.html" title="Your cart">
                    <Icon icon="shopping-cart" />
                    <span id="item-count"></span>
                </a>
                <li>
                    <a href="authentication.html" title="Account">
                        <Icon icon="user" />
                    </a>
                </li>
            </li> -->
        </ul>
    </nav>
</header>

<style>
    header {
        backdrop-filter: blur(20px);
        background: linear-gradient(135deg, rgba(255, 255, 255, 0.8), rgba(255, 255, 255, 0.6));
        border-bottom: 1px solid rgba(255, 255, 255, 0.2);
        box-shadow: var(--shadow-subtle);
        display: flex;
        justify-content: space-between;
        position: fixed;
        top: 0;
        transition: transform 0.3s ease;
        white-space: nowrap;
        width: 100%;
        z-index: 1000;
        padding: var(--spacing-small) var(--spacing-large);
    }

    @media (prefers-color-scheme: dark) {
        header {
            background: linear-gradient(135deg, rgba(44, 24, 16, 0.9), rgba(26, 15, 8, 0.8));
        }
    }

    header.hide {
        transform: translateY(-100%);
    }

    header.show {
        transform: translateY(0);
    }

    header > a {
        align-items: center;
        display: flex;
        gap: var(--spacing-medium);
        text-decoration: none;
        transition: all 0.3s ease;
    }

    header > a:hover {
        transform: scale(1.02);
    }

    header h1 {
        font-family: var(--font-heading);
        font-weight: 300;
        letter-spacing: 2px;
        font-size: 1.5rem;
    }

    nav ul {
        display: flex;
        gap: var(--spacing-large);
        align-items: center;
    }

    nav a {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 2.5rem;
        height: 2.5rem;
        border-radius: 50%;
        transition: all 0.3s ease;
        position: relative;
    }

    nav a:hover {
        background: rgba(255, 255, 255, 0.2);
        transform: scale(1.1);
    }

    #item-count {
        position: absolute;
        top: -0.25rem;
        right: -0.25rem;
        background: var(--color-primary);
        color: white;
        border-radius: 50%;
        width: 1.2rem;
        height: 1.2rem;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 0.7rem;
        font-weight: bold;
        border: 2px solid white;
    }

    @media screen and (width <= 850px) {
        header {
            padding: var(--spacing-small) var(--spacing-medium);
            flex-direction: column;
            gap: var(--spacing-small);
        }

        header h1 {
            font-size: 1.2rem;
        }

        nav ul {
            gap: var(--spacing-medium);
        }
    }
</style>

<script type="module" is:inline>
    const header = document.querySelector('header')

    const showAdminLink = () => {
        if (document.cookie.includes('loggedIn=true') && document.cookie.includes('isAdmin=true')) {
            document.getElementById('admin-link').style.display = 'list-item'
        }
    }

    document.readyState === 'loading'
        ? document.addEventListener('DOMContentLoaded', showAdminLink)
        : showAdminLink()

    let lastScroll = 0

    window.addEventListener('scroll', () => {
        const current = window.scrollY
        const scrollingDown = current > lastScroll

        header.classList.toggle('hide', scrollingDown && current > 0)
        header.classList.toggle('show', !scrollingDown || current <= 0)

        lastScroll = Math.max(current, 0)
    })
</script>
